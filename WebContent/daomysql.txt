package fr.prive.gestionSeriesFilm.dal;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.TypedQuery;

import fr.prive.gestionSeriesFilm.bo.*;

public class daoMysql {
	
	/**
	 * Permet la crÈation d'une sÈrie en DB
	 * @param serie
	 * @throws daoException
	 */
	public static void ajouterSerie(Serie serie) throws daoException {
		// Association au manager obligatoire
		EntityManager em = daoManager.getEntityManager();
		EntityTransaction et = em.getTransaction();
		et.begin();
		// Acc√®s possible
		try {
			em.persist(serie);
			et.commit();
		} catch (Exception e) {
			e.printStackTrace();
			et.rollback();
			throw new daoException("Erreur lors de l'ajout de la serie " + serie + " : " + e.getMessage());
		} finally {
			em.close();
			
		}
		
		
	}

	/**
	 * Permet la crÈation d'une saison en DB
	 * @param saison
	 * @throws daoException
	 */
	public static void ajouterSaison(Saison saison) throws daoException {
		// Association au manager obligatoire
		EntityManager em = daoManager.getEntityManager();
		EntityTransaction et = em.getTransaction();
		et.begin();
		// Acc√®s possible
		try {
			em.persist(saison);
			et.commit();
		} catch (Exception e) {
			e.printStackTrace();
			et.rollback();
			throw new daoException("Erreur lors de l'ajout de la saison " + saison + " : " + e.getMessage());
		} finally {
			em.close();
		}
		
	}

	/**
	 * Permet la crÈation d'un Èpisode en DB
	 * @param episode
	 * @throws daoException
	 */
	public static void ajouterEpisode(Episode episode) throws daoException {
		// Association au manager obligatoire
		EntityManager em = daoManager.getEntityManager();
		EntityTransaction et = em.getTransaction();
		et.begin();
		// Acc√®s possible
		try {
			em.persist(episode);
			et.commit();
		} catch (Exception e) {
			e.printStackTrace();
			et.rollback();
			throw new daoException("Erreur lors de l'ajout de la episode " + episode + " : " + e.getMessage());
		} finally {
			em.close();
		}
		
	}
	
	/**
	 * Modifie un film dans la DB
	 * @param film
	 * @throws daoException
	 */
	public static void updateSerie(Serie serie) throws daoException {
		// Association au manager obligatoire
		EntityManager em = daoManager.getEntityManager();
		EntityTransaction et = em.getTransaction();
		et.begin();
		// Acc√®s possible
		try {
			em.merge(serie);
			et.commit();
		} catch (Exception e) {
			e.printStackTrace();
			et.rollback();
			throw new daoException("Erreur lors de la modification de la serie " + serie + " : " + e.getMessage());
		} finally {
			em.close();
		}
		
	}
	
	/**
	 * Permet la suppression d'une sÈrie en DB
	 * @param idSalle
	 * @throws daoException
	 */
	public static void supprimerSerie(int idSerie) throws daoException {
		// Association au manager obligatoire
		EntityManager em = daoManager.getEntityManager();
		EntityTransaction et = em.getTransaction();
		et.begin();
		// Acc√®s possible
		try {
			Serie serie = em.find(Serie.class, idSerie);
			em.remove(serie);
			et.commit();
		} catch (Exception e) {
			e.printStackTrace();
			et.rollback();
			throw new daoException("Erreur lors de la suppression de la serie n∞" + idSerie + " : " + e.getMessage());
		} finally {
			em.close();
		}
		
	}
	
	
	/**
	 * Permet de sortir toutes les series de la DB
	 * @return
	 */
	public static List<Serie> findAllSerie() {
		EntityManager em = daoManager.getEntityManager();
		try {
			TypedQuery<Serie> query = em.createNamedQuery("findTousSerie", Serie.class);
			List<Serie> s = query.getResultList();
			return s;
		} finally {
			if (em != null) {
				em.close();
			    System.out.println("1111111111");
	      }
		}
	}
	
	/**
	 * Retourne une sÈrie selon l'id
	 * @param idSalle
	 * @return
	 * @throws daoException
	 */
	public static Serie afficherSerieById(int idSerie) throws daoException {
		// Association au manager obligatoire
		EntityManager em = daoManager.getEntityManager();
		EntityTransaction et = em.getTransaction();
		et.begin();
		Serie serie = null;
		// Acc√®s possible
		try {
			serie = em.find(Serie.class, idSerie);
			return serie;
		} catch (Exception e) {
			throw new daoException("Erreur lors de l'acc√®s ‡ la sÈrie n∞" + idSerie + " : " + e.getMessage());
		} finally {
			if (em != null) {
				em.close();
			    System.out.println("22222222222");
		      }
		}
		
	}

	public static List<Saison> findAllSaisonsById(int id) {
		EntityManager em = daoManager.getEntityManager();
		try {
			TypedQuery<Saison> query = em.createNamedQuery("listeSaisonById", Saison.class);
			query.setParameter("var", id);
			List<Saison> s = query.getResultList();
			return s;
		} finally {
			em.close();
		    System.out.println("333333333333");
		}
		
	}

	public static void supprimerSaison(int idSaison) throws daoException {
		// Association au manager obligatoire
		EntityManager em = daoManager.getEntityManager();
		EntityTransaction et = em.getTransaction();
		et.begin();
		// Acc√®s possible
		try {
			Saison saison = em.find(Saison.class, idSaison);
			em.remove(saison);
			et.commit();
		} catch (Exception e) {
			e.printStackTrace();
			et.rollback();
			throw new daoException("Erreur lors de la suppression de la saison n∞" + idSaison + " : " + e.getMessage());
		} finally {
			em.close();
		}
		
	}

	